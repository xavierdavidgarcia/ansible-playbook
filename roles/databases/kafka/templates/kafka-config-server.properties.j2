# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
{% if docker != '1' %}
broker.id={{ansible_eth0.ipv4.address.replace('.', '')}}
{% else %}
broker.id=0
auto.create.topics.enable = true
{% endif %}
############################# Socket Server Settings #############################

# The port the socket server listens on
port={{ SERVER_PORT }}

# Hostname the broker will bind to and advertise to producers and consumers.
# If not set, the server will bind to all interfaces and advertise the value returned from
# from java.net.InetAddress.getCanonicalHostName().
{% if docker != '1' %}
host.name={{ansible_eth0.ipv4.address}}
{% endif %}



# The number of threads handling network requests
num.network.threads={{ KAFKA_SERVER_NUM_NET_THREADS }}

# The number of threads doing disk I/O
num.io.threads={{ KAFKA_SERVER_NUM_IO_THREADS }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{ KAFKA_SOCKET_SEND_BUF_BYTES }}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{ KAFKA_SOCKET_RCEIVE_BUF_BYTES }}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{ KAFKA_SOCKET_REQUEST_MAX_BYTES }}


############################# Log Basics #############################

# The directory under which to store log files
log.dirs={{ DATA_FOLDER }}/kafka

# The number of logical partitions per topic per server. More partitions allow greater parallelism
# for consumption, but also mean more files.
num.partitions={{ KAFKA_SERVER_NUM_PARTITIONS }}


############################# Log Flush Policy #############################

# The following configurations control the flush of data to disk. This is the most
# important performance knob in kafka.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data is at greater risk of loss in the event of a crash.
#    2. Latency: Data is not made available to consumers until it is flushed (which adds latency).
#    3. Throughput: The flush is generally the most expensive operation.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval.messages={{ KAFKA_SERVER_LOG_FLUSH_INTERVAL }}

# The maximum amount of time a message can sit in a log before we force a flush
log.flush.interval.ms={{ KAFKA_SERVER_LOG_FLUSH_INTERVAL_MS }}

# Per-topic overrides for log.flush.interval.ms
log.flush.intervals.ms.per.topic=topic1:1000, topic2:3000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours={{ KAFKA_SERVER_LOG_RETENTION_HOURS }}

# the maximum size of the log before deleting it. This controls how large a log is allowed to grow
log.retention.size = {{ KAFKA_SERVER_LOG_RETENTION_SIZE }}

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{ KAFKA_SERVER_LOG_SEGMENT_BYTES }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.cleanup.interval.mins={{ KAFKA_SERVER_LOG_CLEANUP_INTERVAL_MINS }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=60000

# By default the log cleaner is disabled and the log retention policy will default to just delete segments after their retention expires.
# If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.
log.cleaner.enable=true

################################## Replication #################################

# The default replication factor for automatically created topics.

##default.replication.factor={{ KAFKA_SERVER_REPLICATION_FACTOR }}

# If a follower hasn't sent any fetch requests for this window of time, the
# leader will remove the follower from ISR (in-sync replicas) and treat it as dead.
replica.lag.time.max.ms=10000

# If a replica falls more than this many messages behind the leader, the leader
# will remove the follower from ISR and treat it as dead.
replica.lag.max.messages=4000

# The socket timeout for network requests to the leader for replicating data.
# 30 * 1000
replica.socket.timeout.ms=30000

# The socket receive buffer for network requests to the leader for replicating data.
# 64 * 1024
replica.socket.receive.buffer.bytes=65536

# The number of byes of messages to attempt to fetch for each partition in the
# fetch requests the replicas send to the leader.
# 1024 * 1024
replica.fetch.max.bytes=1048576

# The maximum amount of time to wait time for data to arrive on the leader in
# the fetch requests sent by the replicas to the leader.
replica.fetch.wait.max.ms=500

# Minimum bytes expected for each fetch response for the fetch requests from
# the replica to the leader. If not enough bytes, wait up to
# replica.fetch.wait.max.ms for this many bytes to arrive.
replica.fetch.min.bytes=1

# Number of threads used to replicate messages from leaders. Increasing this
# value can increase the degree of I/O parallelism in the follower broker.
num.replica.fetchers=1

############################# Zookeeper #############################
num.threads=8
enable.zookeeper=true

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.

zookeeper.connect={{ KAFKA_SERVER_ZOOKEEPER_CONNECT|join(",") }}
#zookeeper.connect={{ansible_eth0.ipv4.address}}:2181


# Timeout in ms for connecting to zookeeper

zookeeper.connection.timeout.ms={{ KAFKA_SERVER_ZOOKEEPER_CONNECT_TIMEOUT }}

# metrics reporter properties
#kafka.metrics.polling.interval.secs={{ KAFKA_SERVER_ZOOKEEPER_METRICS_POLLING_INTERVAL }}
#kafka.metrics.reporters={{ KAFKA_SERVER_METRICS_REPORTERS }}

#kafka.csv.metrics.dir={{ DATA_FOLDER }}/kafka
#kafka.csv.metrics.reporter.enabled={{ KAFKA_SERVER_METRIC_ENABLE_CSV }}

#librato.username={{ kafka_graphite_metrics_username }}
#librato.token={{ kafka_graphite_metrics_token }}
#librato.agent.identifier={{ kafka_graphite_metrics_group }}
